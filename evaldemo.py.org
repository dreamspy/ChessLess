import chess
import chess.uci
import chess.pgn
import sys

# Command line arguments
arguments = sys.argv
pgnfilename = str(arguments[1])

# Set up the chess engine
evaltime = 10 # thinking time for engine to evaluate each position (in ms).
handler = chess.uci.InfoHandler()
engine = chess.uci.popen_engine('./stockfish-8-mac/Mac/stockfish-8-64')
#engine = chess.uci.popen_engine('./stockfish-8-64')
engine.info_handlers.append(handler)


# Play to the board the static evalution applies to and output it and its evaluation.
def output_evaluation( board, pv, eval ):
    print("----------")
    tmp_board = board.copy();
    for move in pv:
        #print(move)
        tmp_board.push(move)
#    print(tmp_board)
    print(tmp_board.fen())
    print(eval)

# Have engine evaluate the board
def evaluate(board):
    engine.position(board)
    #evaluation = engine.go(movetime=evaltime)
    evaluation = engine.go(depth=1)
    #print(evaluation)
    #print( board.fen() )
    #print( board )
    #print ('Board evaluation', handler.info["score"][1].cp/100.0)
    #print ('Best move', board.san(evaluation[0]))
    #print ('Principal variation: ', board.variation_san(handler.info["pv"][1]))
    output_evaluation( board, handler.info["pv"][1], handler.info["score"][1].cp/100.0 )

#Read pgn file:
f = open(pgnfilename)

# Loop through games.
game = chess.pgn.read_game(f)
while game != None:
    print(game)
    board = game.board()
    evaluate(board)
    for move in game.main_line():
        #print(move)
        board.push(move)
        evaluate(board)
    game = chess.pgn.read_game(f)

f.close()
